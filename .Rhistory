if (same) {
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,    "B" = 10, "C" = 10, "0" = 0) #用向量构建各个符号对应的奖励值
prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
prize <- 5 # 情况二只有一种奖励值
} else {
cherries = sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1] #上方的if树可以用查找table的形式实现
}
# adjust for diamonds
diamonds = sum(symbols == "DD")
prize = prize*2^diamonds
prize
}
score(symbols) #获得了第一行形状组合的奖金
---
title: "Untitled"
---
title: "Untitled"
```{r}
for (value in c("My", "first", "for", "loop")) {
print("one run")
}
for (value in c("My", "first", "for", "loop")) {
print("one run")
}
value
for (value in c("My", "first", "for", "loop")) {
print(value)
}
for (value in c("My", "second", "for", "loop")) {
print(value) #调用参数value
}
for (value in c("My", "second", "for", "loop")) {
print(value) #调用参数value
}
for (i in c("My", "second", "for", "loop")) {
print(i) #调用参数value
}
chars = vector(length = 4) #构建一个空向量
#构建一个循环来填充此向量
words = c("My", "fourth", "for", "loop")
for (i in 1:4) {
chars[i] = words[i]
}
chars
chars = vector(length = 4) #构建一个空向量
#构建一个循环来填充此向量
words = c("My","fourth", "for", "loop")
for (i in 1:4) {
chars[i] = words[i]
}
chars
symbol2$prize = NA
symbol2
str(symbol2)
symbol2$prize = NA #新建一个空的变量
symbol2
for (i in 1:343) {
symbols <- c(symbol2[i, 1], symbol2[i, 2], symbol2[i, 3])
symbol2$prize[i] = score(symbols)
}
symbol2$prize = NA #新建一个空的变量
symbol2
for (i in 1:343) {
symbols <- c(symbol2[i, 1], symbol2[i, 2], symbol2[i, 3])
symbol2$prize = score(symbols)
}
symbol2$prize = NA #新建一个空的变量
symbol2
for (i in 1:nrow(symbol2)) {
symbols <- c(symbol2[i, 1], symbol2[i, 2], symbol2[i, 3])
symbol2$prize[i] = score(symbols)
}
symbol2$prize = NA #新建一个空的变量
for (i in 1:nrow(symbol2)) {
symbols <- c(symbol2[i, 1], symbol2[i, 2], symbol2[i, 3])
symbol2$prize[i] = score(symbols)
}
symbol2
sum(symbol2$prize*symbol2$prob)
score <- function(symbols) {
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
# identify case
# since diamonds are wild, only nondiamonds
# matter for three of a kind and all bars
slots <- symbols[symbols != "DD"]
same <- length(unique(slots)) == 1
bars <- slots %in% c("B", "BB", "BBB")
# assign prize
if (diamonds == 3) {
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if (all(bars)) {
prize <- 5
} else if (cherries > 0) {
# diamonds count as cherries
# so long as there is one real cherry
prize <- c(0, 2, 5)[cherries + diamonds + 1]
} else {
prize <- 0
}
# double for each diamond
prize * 2^diamonds
}
symbol2$prize = NA #新建一个空的变量
for (i in 1:nrow(symbol2)) {
symbols <- c(symbol2[i, 1], symbol2[i, 2], symbol2[i, 3])
symbol2$prize[i] = score(symbols)
}
symbol2 #成功对应
#重新计算期望值：
sum(symbol2$prize*symbol2$prob)
#重新计算期望值：
sum(symbol2$prize*symbol2$prob)
score <- function(symbols) {
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
# identify case
# since diamonds are wild, only nondiamonds
# matter for three of a kind and all bars
slots <- symbols[symbols != "DD"]
same <- length(unique(slots)) == 1
bars <- slots %in% c("B", "BB", "BBB")
# assign prize
if (diamonds == 3) {
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if (all(bars)) {
prize <- 5
} else if (cherries > 0) {
# diamonds count as cherries
# so long as there is one real cherry
prize <- c(0, 2, 5)[cherries + diamonds + 1]
} else {
prize <- 0
}
# double for each diamond
prize * 2^diamonds
}
symbol2$prize = NA #新建一个空的变量
for (i in 1:nrow(symbol2)) {
symbols <- c(symbol2[i, 1], symbol2[i, 2], symbol2[i, 3])
symbol2$prize[i] = score(symbols)
}
symbol2 #成功对应
#重新计算期望值：
sum(symbol2$prize*symbol2$prob)
symbol2 #成功对应
score <- function(symbols) {
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
# identify case
# since diamonds are wild, only nondiamonds
# matter for three of a kind and all bars
slots <- symbols[symbols != "DD"]
same <- length(unique(slots)) == 1
bars <- slots %in% c("B", "BB", "BBB")
# assign prize
if (diamonds == 3) {
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if (all(bars)) {
prize <- 5
} else if (cherries > 0) {
# diamonds count as cherries
# so long as there is one real cherry
prize <- c(0, 2, 5)[cherries + diamonds + 1]
} else {
prize <- 0
}
# double for each diamond
prize * 2^diamonds
}
symbol2$prize = NA #新建一个空的变量
for (i in 1:nrow(symbol2)) {
symbols <- c(symbol2[i, 1], symbol2[i, 2], symbol2[i, 3])
symbol2$prize[i] = score(symbols)
}
symbol2 #成功对应
#Slot Machine
#获得三个符号
get_symbols = function(){
wheels = c("DD","7","BBB","BB","B","C","0")
sample(wheels,size = 3,replace = TRUE,prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
symbols = get_symbols()
#根据三个符号进行奖励分配
score <- function(symbols) {
# identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
# get prize
if (same) {
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,    "B" = 10, "C" = 10, "0" = 0) #用向量构建各个符号对应的奖励值
prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
prize <- 5 # 情况二只有一种奖励值
} else {
cherries = sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1] #上方的if树可以用查找table的形式实现
}
# adjust for diamonds
diamonds = sum(symbols == "DD")
prize = prize*2^diamonds
prize
}
#整合得到play函数
play <- function() {
symbols <- get_symbols()
print(symbols)
score(symbols)
}
#调用老虎机
play()
play_till_broke = function(start_with){
cash = start_with #起始资金
n = 0 #玩的次数
while (cash>0) {
cash = cash - 1 + play()
n <- n+1
}
print(n)
}
play_till_broke(200)
play_till_broke(200)
play_till_broke(10)
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(10)
## 237
View(play)
play <- function() {
symbols <- get_symbols()
# print(symbols)
score(symbols)
}
#调用老虎机
play()
#调用老虎机
play()
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(10)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
play <- function() {
symbols <- get_symbols()
print(symbols)
score(symbols)
}
y()
play()
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(20)
## 237
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(5)
## 237
symbol = c("DD","7","BBB","BB","B","C","0")
symbol
symbol2 = expand.grid(symbol,symbol,symbol)
symbol2 #生成形状的排列组合
prob0 = c("DD"=0.03, "7"=0.03, "BBB"=0.06,"BB"= 0.1,"B"= 0.25, "C"=0.01, "0"=0.52) #生成查找表
symbol2$prob1 = prob0[symbol2$Var1] #第一个形状的概率
symbol2$prob2 = prob0[symbol2$Var2] #第二个
symbol2$prob3 = prob0[symbol2$Var3] #第三个
symbol2$prob = symbol2$prob1*symbol2$prob2*symbol2$prob3 #总概率
head(symbol2)
#奖金匹配函数
score <- function(symbols) {
# identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
# get prize
if (same) {
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,    "B" = 10, "C" = 10, "0" = 0) #用向量构建各个符号对应的奖励值
prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
prize <- 5 # 情况二只有一种奖励值
} else {
cherries = sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1] #上方的if树可以用查找table的形式实现
}
# adjust for diamonds
diamonds = sum(symbols == "DD")
prize = prize*2^diamonds
prize
}
#获得每个形状组合的对应奖金：
symbols <- c(symbol2[1, 1], symbol2[1, 2], symbol2[1, 3])
score(symbols) #获得了第一行形状组合的奖金
#现在要重复这项命令来获取总共343行结果对应的奖金值
